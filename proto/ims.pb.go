// Code generated by protoc-gen-go.
// source: ims.proto
// DO NOT EDIT!

/*
Package ims is a generated protocol buffer package.

It is generated from these files:
	ims.proto

It has these top-level messages:
	Void
	StatusReply
	StopReply
	AssumeRoleRequest
	Profile
	ConfigReply
*/
package ims

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusReply struct {
	Error           string `protobuf:"bytes,1,opt,name=Error,json=error" json:"Error,omitempty"`
	Role            string `protobuf:"bytes,2,opt,name=Role,json=role" json:"Role,omitempty"`
	AccessKeyId     string `protobuf:"bytes,3,opt,name=AccessKeyId,json=accessKeyId" json:"AccessKeyId,omitempty"`
	SecretAccessKey string `protobuf:"bytes,4,opt,name=SecretAccessKey,json=secretAccessKey" json:"SecretAccessKey,omitempty"`
	SessionToken    string `protobuf:"bytes,5,opt,name=SessionToken,json=sessionToken" json:"SessionToken,omitempty"`
	Expiration      string `protobuf:"bytes,6,opt,name=Expiration,json=expiration" json:"Expiration,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StopReply struct {
	Error string `protobuf:"bytes,1,opt,name=Error,json=error" json:"Error,omitempty"`
}

func (m *StopReply) Reset()                    { *m = StopReply{} }
func (m *StopReply) String() string            { return proto.CompactTextString(m) }
func (*StopReply) ProtoMessage()               {}
func (*StopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AssumeRoleRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Mfa  string `protobuf:"bytes,2,opt,name=Mfa,json=mfa" json:"Mfa,omitempty"`
}

func (m *AssumeRoleRequest) Reset()                    { *m = AssumeRoleRequest{} }
func (m *AssumeRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*AssumeRoleRequest) ProtoMessage()               {}
func (*AssumeRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Profile struct {
	AwsAccessKeyID     string `protobuf:"bytes,1,opt,name=AwsAccessKeyID,json=awsAccessKeyID" json:"AwsAccessKeyID,omitempty"`
	AwsSecretAccessKey string `protobuf:"bytes,2,opt,name=AwsSecretAccessKey,json=awsSecretAccessKey" json:"AwsSecretAccessKey,omitempty"`
	AwsSessionToken    string `protobuf:"bytes,3,opt,name=AwsSessionToken,json=awsSessionToken" json:"AwsSessionToken,omitempty"`
	Region             string `protobuf:"bytes,4,opt,name=Region,json=region" json:"Region,omitempty"`
	MFASerial          string `protobuf:"bytes,5,opt,name=MFASerial,json=mFASerial" json:"MFASerial,omitempty"`
	RoleARN            string `protobuf:"bytes,6,opt,name=RoleARN,json=roleARN" json:"RoleARN,omitempty"`
	SourceProfile      string `protobuf:"bytes,7,opt,name=SourceProfile,json=sourceProfile" json:"SourceProfile,omitempty"`
	RoleSessionName    string `protobuf:"bytes,8,opt,name=RoleSessionName,json=roleSessionName" json:"RoleSessionName,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ConfigReply struct {
	Profiles map[string]*Profile `protobuf:"bytes,1,rep,name=profiles" json:"profiles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ConfigReply) Reset()                    { *m = ConfigReply{} }
func (m *ConfigReply) String() string            { return proto.CompactTextString(m) }
func (*ConfigReply) ProtoMessage()               {}
func (*ConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigReply) GetProfiles() map[string]*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func init() {
	proto.RegisterType((*Void)(nil), "ims.Void")
	proto.RegisterType((*StatusReply)(nil), "ims.StatusReply")
	proto.RegisterType((*StopReply)(nil), "ims.StopReply")
	proto.RegisterType((*AssumeRoleRequest)(nil), "ims.AssumeRoleRequest")
	proto.RegisterType((*Profile)(nil), "ims.Profile")
	proto.RegisterType((*ConfigReply)(nil), "ims.ConfigReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for InstanceMetaService service

type InstanceMetaServiceClient interface {
	Status(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StatusReply, error)
	Stop(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StopReply, error)
	AssumeRole(ctx context.Context, in *AssumeRoleRequest, opts ...grpc.CallOption) (*StatusReply, error)
	RetrieveRole(ctx context.Context, in *AssumeRoleRequest, opts ...grpc.CallOption) (*StatusReply, error)
	Config(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ConfigReply, error)
}

type instanceMetaServiceClient struct {
	cc *grpc.ClientConn
}

func NewInstanceMetaServiceClient(cc *grpc.ClientConn) InstanceMetaServiceClient {
	return &instanceMetaServiceClient{cc}
}

func (c *instanceMetaServiceClient) Status(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/ims.InstanceMetaService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceMetaServiceClient) Stop(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := grpc.Invoke(ctx, "/ims.InstanceMetaService/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceMetaServiceClient) AssumeRole(ctx context.Context, in *AssumeRoleRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/ims.InstanceMetaService/AssumeRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceMetaServiceClient) RetrieveRole(ctx context.Context, in *AssumeRoleRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/ims.InstanceMetaService/RetrieveRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceMetaServiceClient) Config(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := grpc.Invoke(ctx, "/ims.InstanceMetaService/Config", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InstanceMetaService service

type InstanceMetaServiceServer interface {
	Status(context.Context, *Void) (*StatusReply, error)
	Stop(context.Context, *Void) (*StopReply, error)
	AssumeRole(context.Context, *AssumeRoleRequest) (*StatusReply, error)
	RetrieveRole(context.Context, *AssumeRoleRequest) (*StatusReply, error)
	Config(context.Context, *Void) (*ConfigReply, error)
}

func RegisterInstanceMetaServiceServer(s *grpc.Server, srv InstanceMetaServiceServer) {
	s.RegisterService(&_InstanceMetaService_serviceDesc, srv)
}

func _InstanceMetaService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InstanceMetaServiceServer).Status(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InstanceMetaService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InstanceMetaServiceServer).Stop(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InstanceMetaService_AssumeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AssumeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InstanceMetaServiceServer).AssumeRole(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InstanceMetaService_RetrieveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AssumeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InstanceMetaServiceServer).RetrieveRole(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _InstanceMetaService_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InstanceMetaServiceServer).Config(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _InstanceMetaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ims.InstanceMetaService",
	HandlerType: (*InstanceMetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _InstanceMetaService_Status_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _InstanceMetaService_Stop_Handler,
		},
		{
			MethodName: "AssumeRole",
			Handler:    _InstanceMetaService_AssumeRole_Handler,
		},
		{
			MethodName: "RetrieveRole",
			Handler:    _InstanceMetaService_RetrieveRole_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _InstanceMetaService_Config_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x8f, 0xd2, 0x40,
	0x14, 0x5d, 0x68, 0x29, 0xdb, 0x0b, 0x0b, 0xeb, 0x68, 0x36, 0xcd, 0xc6, 0x6c, 0xd6, 0x6a, 0x94,
	0x27, 0x1e, 0xf0, 0x65, 0xe5, 0x0d, 0x15, 0x13, 0x62, 0xd8, 0x98, 0xd6, 0xf8, 0x3e, 0x76, 0x2f,
	0x9b, 0x66, 0xa1, 0x83, 0x33, 0x53, 0x94, 0x57, 0x7f, 0x83, 0xbf, 0xc0, 0x57, 0x7f, 0x88, 0x7f,
	0xcb, 0xf9, 0x12, 0x5a, 0x31, 0x26, 0xbe, 0xdd, 0x39, 0xf7, 0xdc, 0xcb, 0x9c, 0xd3, 0x33, 0x40,
	0x98, 0xaf, 0xc4, 0x70, 0xcd, 0x99, 0x64, 0xc4, 0x53, 0x65, 0x1c, 0x80, 0xff, 0x81, 0xe5, 0x37,
	0xf1, 0xcf, 0x06, 0x74, 0x52, 0x49, 0x65, 0x29, 0x12, 0x5c, 0x2f, 0xb7, 0xe4, 0x01, 0xb4, 0xa6,
	0x9c, 0x33, 0x1e, 0x35, 0x2e, 0x1b, 0x83, 0x30, 0x69, 0xa1, 0x3e, 0x10, 0x02, 0x7e, 0xc2, 0x96,
	0x18, 0x35, 0x0d, 0xe8, 0x73, 0x55, 0x93, 0x4b, 0xe8, 0x4c, 0xb2, 0x0c, 0x85, 0x78, 0x8b, 0xdb,
	0xd9, 0x4d, 0xe4, 0x99, 0x56, 0x87, 0xee, 0x21, 0x32, 0x80, 0x7e, 0x8a, 0x19, 0x47, 0xb9, 0xe3,
	0x45, 0xbe, 0x61, 0xf5, 0x45, 0x1d, 0x26, 0x31, 0x74, 0x53, 0x55, 0xe6, 0xac, 0x78, 0xcf, 0xee,
	0xb0, 0x88, 0x5a, 0x86, 0xd6, 0x15, 0x15, 0x8c, 0x5c, 0x00, 0x4c, 0xbf, 0xac, 0x73, 0x4e, 0xa5,
	0x82, 0xa2, 0xc0, 0x30, 0x00, 0x77, 0x48, 0xfc, 0x08, 0xc2, 0x54, 0xb2, 0xf5, 0x3f, 0x64, 0xc4,
	0x2f, 0xe0, 0xde, 0x44, 0x88, 0x72, 0x85, 0x5a, 0x4c, 0x82, 0x9f, 0x4a, 0x14, 0x52, 0x6b, 0xbb,
	0xa6, 0x2b, 0x74, 0x4c, 0xbf, 0x50, 0x35, 0x39, 0x05, 0x6f, 0xbe, 0xa0, 0x4e, 0xae, 0xb7, 0x5a,
	0xd0, 0xf8, 0x47, 0x13, 0xda, 0xef, 0x38, 0x5b, 0xe4, 0x4a, 0xf9, 0x53, 0xe8, 0x4d, 0x3e, 0x8b,
	0xbd, 0xf8, 0xd7, 0x6e, 0xb6, 0x47, 0x6b, 0x28, 0x19, 0x02, 0x51, 0xbc, 0x3f, 0x2d, 0xb0, 0x4b,
	0x09, 0x3d, 0xe8, 0x68, 0xbf, 0x0c, 0xbf, 0x62, 0x84, 0x75, 0xb5, 0x4f, 0xeb, 0x30, 0x39, 0x83,
	0x20, 0xc1, 0x5b, 0xed, 0x83, 0x35, 0x34, 0xe0, 0xe6, 0x44, 0x1e, 0x42, 0x38, 0x7f, 0x33, 0x49,
	0x91, 0xe7, 0x74, 0xe9, 0x4c, 0x0c, 0x57, 0xbf, 0x01, 0x12, 0x41, 0x5b, 0x0b, 0x9f, 0x24, 0xd7,
	0xce, 0xbe, 0x36, 0xb7, 0x47, 0xf2, 0x04, 0x4e, 0x52, 0x56, 0xf2, 0x0c, 0x9d, 0xc4, 0xa8, 0x6d,
	0xfa, 0x27, 0xa2, 0x0a, 0xea, 0xfb, 0xe9, 0x79, 0x77, 0x13, 0x63, 0xda, 0xb1, 0xbd, 0x1f, 0xaf,
	0xc3, 0xf1, 0x37, 0x95, 0xaa, 0x57, 0xac, 0x58, 0xe4, 0xb7, 0xf6, 0x73, 0x8c, 0xe1, 0x78, 0x6d,
	0x97, 0x08, 0xe5, 0x95, 0x37, 0xe8, 0x8c, 0x2e, 0x86, 0x3a, 0x90, 0x15, 0xce, 0xd0, 0xfd, 0x8a,
	0x98, 0x16, 0x92, 0x6f, 0x93, 0x1d, 0xff, 0x7c, 0x06, 0x27, 0xb5, 0x96, 0xfe, 0x38, 0x77, 0xca,
	0x47, 0xeb, 0xb9, 0x2e, 0x55, 0x7c, 0x5a, 0x1b, 0xba, 0x2c, 0x6d, 0x3e, 0x3b, 0xa3, 0xae, 0xd9,
	0xed, 0x86, 0x12, 0xdb, 0x1a, 0x37, 0xaf, 0x1a, 0xa3, 0xaf, 0x4d, 0xb8, 0x3f, 0x2b, 0x84, 0xa4,
	0x45, 0x86, 0x73, 0x94, 0x54, 0xf9, 0xb2, 0xc9, 0x33, 0x24, 0xcf, 0x20, 0xb0, 0x6f, 0x80, 0x84,
	0x66, 0x54, 0xbf, 0x8c, 0xf3, 0x53, 0x53, 0x56, 0xde, 0x46, 0x7c, 0x44, 0x1e, 0x83, 0xaf, 0x33,
	0x56, 0xa5, 0xf5, 0x1c, 0xcd, 0x25, 0x4f, 0x91, 0xae, 0x00, 0xf6, 0x29, 0x23, 0x67, 0xa6, 0x7f,
	0x10, 0xbb, 0xbf, 0xae, 0x1f, 0x43, 0x37, 0x41, 0xc9, 0x73, 0xdc, 0xfc, 0xff, 0xac, 0xd2, 0x60,
	0xdd, 0x3c, 0xd4, 0x50, 0x71, 0x39, 0x3e, 0x7a, 0x19, 0x7c, 0x6f, 0x7a, 0xb3, 0x79, 0xfa, 0x31,
	0x30, 0xff, 0x06, 0xcf, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x07, 0xc7, 0x1f, 0x18, 0x1a, 0x04,
	0x00, 0x00,
}
